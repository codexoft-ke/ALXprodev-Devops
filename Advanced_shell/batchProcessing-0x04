#!/bin/bash
# Script to fetch Pokémon data in parallel using background processes

POKEMON_LIST=(bulbasaur ivysaur venusaur charmander charmeleon)
DATA_DIR="pokemon_data"
API_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_LOG="errors.txt"

mkdir -p "$DATA_DIR"
> "$ERROR_LOG"

fetch_pokemon() {
    local pokemon="$1"
    local retries=3
    local attempt=1
    while [ $attempt -le $retries ]; do
        curl -s -f "$API_URL/$pokemon" -o "$DATA_DIR/$pokemon.json"
        if [ $? -eq 0 ]; then
            echo "Saved data to $DATA_DIR/$pokemon.json ✅"
            return 0
        else
            echo "Attempt $attempt failed for $pokemon." >> "$ERROR_LOG"
            attempt=$((attempt+1))
            sleep 2
        fi
    done
    echo "Failed to fetch data for $pokemon after 3 attempts. Skipping." | tee -a "$ERROR_LOG"
}

job_pids=()
for pokemon in "${POKEMON_LIST[@]}"; do
    echo "Fetching data for $pokemon..."
    fetch_pokemon "$pokemon" &
    job_pids+=("$!")
done

# Wait for all background jobs to finish
for pid in "${job_pids[@]}"; do
    wait "$pid"
done

# List all jobs (should be empty if all finished)
jobs

# Kill any remaining jobs just in case (should not be needed, but for completeness)
for pid in "${job_pids[@]}"; do
    if kill -0 "$pid" 2>/dev/null; then
        kill "$pid"
    fi
done

echo "All fetch operations completed."
